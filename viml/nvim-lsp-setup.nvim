" cmp-nvim-lsp: A Language Server Protocol (LSP) source for nvim-cmp. It provides completion items based on LSP.
Plug 'hrsh7th/cmp-nvim-lsp'

" mason.nvim: A plugin manager for Neovim. It helps to manage and load plugins.
Plug 'williamboman/mason.nvim'

" mason-lspconfig.nvim: Provides configurations for setting up Language Server Protocol (LSP) with mason.nvim.
Plug 'williamboman/mason-lspconfig.nvim'

" nvim-lspconfig: A collection of common configurations for Neovim's built-in LSP client. It makes setting up Neovim's LSP client easier.
Plug 'neovim/nvim-lspconfig'

function! SetupLsp()
  lua << EOF
    vim.lsp.set_log_level("debug")

    -- See also: https://github.com/neovim/nvim-lspconfig/issues/2657#issuecomment-1674107409
    custom_root_dir = function(fname)
      local lspconfig_util = require('lspconfig.util')
      local root_files = { ".git" }

      local function search_upwards(startpath)
        local path = startpath
        while path do
          for _, pattern in ipairs(root_files) do
            if #vim.fn.glob(lspconfig_util.path.join(path, pattern)) > 0 then
              return path
            end
          end
          local parent = lspconfig_util.path.dirname(path)
          if parent == path then
            break
          end
          path = parent
        end
        return nil
      end

      local root = search_upwards(vim.fn.fnamemodify(fname, ':p:h'))
      print("Checking root dir: " .. tostring(root))
      return root
    end

    require("mason").setup({
      ui = {
        icons = {
          package_installed = "✓",
          package_pending = "➜",
          package_uninstalled = "✗"
        }
      }
    })

    local mason_lsp_servers = {
      -- biome = {},
      tsserver = {
        dependencies = { "typescript-language-server" }
      }, -- tsserver before eslint so eslint overrides when conflicted
      -- vtsls = {}, -- vtsls before eslint so eslint overrides when conflicted
      eslint = {
        -- if you have the error: [lspconfig] Unable to find ESLint library.
        -- you need to install an eslint config in your project
        -- npx eslint --init
        dependencies = { "eslint" },
        filetypes = { "javascript", "typescript" },
      }, -- using eslint_d instead via efm, much faster
      -- efm = {
      --   cmd = { vim.fn.expand("$HOME") .. "/go/bin/efm-langserver" },
      --   filetypes = { "javascript", "typescript" },
      --   dependencies = { vim.fn.expand("$HOME") .. "/go/bin/efm-langserver" },
      -- }, -- efm langserver, used for eslint_d, prettier_d
      -- eslint_d = {},
      -- prettier_d = {},
      pyright = {},
      marksman = {},
      typos_lsp = { 
        name = "typos_lsp", 
        filetypes = { "markdown", "text" } 
      }, -- spelling
      vacuum = {}, -- OPEN API Validator
      vimls = {},
      -- sonarlint_language_server = {},
    }

    local custom_lsp_servers = {
    -- not working, use efm instead
    --   ["vscode-eslint-language-server manual install"] = {
    --     cmd = { "vscode-eslint-language-server", "--stdio" },
    --     -- use netcat as a proxy to get visibility into stdin/stdout
    --     -- assumes `vscode-eslint-language-server --stdio | nc -l 12345` in another terminal
    --     -- cmd = { "nc", "localhost", "12345" },
    --     -- use custom proxy to get visibility into stdin/stdout
    --     -- cmd = { vim.fn.expand("$HOME") .. "/socat-wrap-vscode-eslint-language-server.sh" },
    --     filetypes = { "javascript", "typescript" },
    --     root_dir = custom_root_dir,
    --     -- root_dir = require("lspconfig.util").root_pattern("*eslint*", "*.git"),
    --     dependencies = { "vscode-eslint-language-server" }
    --   }
    }

    local function check_dependencies(dependencies)
      for _, dep in ipairs(dependencies) do
        if vim.fn.executable(dep) == 0 then
          vim.notify("Dependency not installed for lspconfig: " .. dep, vim.log.levels.ERROR)
        end
      end
    end

    local mason_servers = {}
    for server, _ in pairs(mason_lsp_servers) do
      table.insert(mason_servers, server)
    end

    require('mason-lspconfig').setup({
      ensure_installed = mason_servers
    })

    -- Set up cmp_nvim_lsp
    local lsp_capabilities = require('cmp_nvim_lsp').default_capabilities()
    local lsp_on_attach = function(client, bufnr)
      client.server_capabilities.documentFormattingProvider = true

      local bufopts = { noremap=true, silent=true, buffer=bufnr }

      vim.keymap.set('n', 'gh'   , vim.lsp.buf.signature_help           , bufopts)
      vim.keymap.set('n', 'gv'   , vim.lsp.buf.hover                    , bufopts)
      vim.keymap.set('n', 'gD'   , vim.lsp.buf.declaration              , bufopts)
      vim.keymap.set('n', 'gd'   , vim.lsp.buf.definition               , bufopts)
      vim.keymap.set('n', 'gi'   , vim.lsp.buf.implementation           , bufopts)
      vim.keymap.set('n', 'go'   , vim.lsp.buf.type_definition          , bufopts)
      vim.keymap.set('n', 'gr'   , vim.lsp.buf.references               , bufopts)
      --m.keymap.set('n', TODO   , vim.lsp.buf.code_action              , bufopts) -- lspconfig: <space>ca; lsp-zero: <F4>
      vim.keymap.set('n', '<space>l', function() vim.lsp.buf.format { async = true } end, bufopts) -- lspconfig: <space>l
      --m.keymap.set('n', TODO   , vim.lsp.buf.rename                   , bufopts) -- lspconfig: <space>rn; lsp-zero: <F2>
    end

    local lspconfig = require('lspconfig')

    -- Setup mason (preconfigured) LSP servers
    for server, config in pairs(mason_lsp_servers) do
      config.capabilities = lsp_capabilities
      config.on_attach = lsp_on_attach
      check_dependencies(config.dependencies or {})
      -- wont work unless called twice
      lspconfig[server].setup(config)
      lspconfig[server].setup(config)
    end

    -- Setup custom LSP servers
    local lsp_configurations = require('lspconfig.configs')
    for server, config in pairs(custom_lsp_servers) do
      if not lsp_configurations[server] then
        lsp_configurations[server] = {
          default_config = config
        }
      end

      check_dependencies(config.dependencies or {})

      config.capabilities = lsp_capabilities
      config.on_attach = lsp_on_attach
      -- wont work unless called twice
      lspconfig[server].setup(config)
      lspconfig[server].setup(config)
    end
EOF
endfunction

autocmd VimEnter * call SetupLsp()
