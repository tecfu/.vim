" Telescope for nvim-cmp implemented in nvim-lsp-setup.nvim
Plug 'nvim-telescope/telescope.nvim'
if $NVIM_CONFIG == 'coc'
  Plug 'fannheyward/telescope-coc.nvim'
endif
Plug 'nvim-telescope/telescope-live-grep-args.nvim'
"brew install cmake make gcc
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release' }

function! SetupTelescopeCoc()
  lua << EOF
  local actions = require('telescope.actions')
  local action_state = require('telescope.actions.state')
  local lga_actions = require("telescope-live-grep-args.actions")

  local function move_selection_previous_5(prompt_bufnr)
    for _ = 1, 5 do
      actions.move_selection_previous(prompt_bufnr)
    end
  end

  local function move_selection_next_5(prompt_bufnr)
    for _ = 1, 5 do
      actions.move_selection_next(prompt_bufnr)
    end
  end

  local select_one_or_multi = function(prompt_bufnr)
    local picker = action_state.get_current_picker(prompt_bufnr)
    local multi = picker:get_multi_selection()
    if not vim.tbl_isempty(multi) then
      actions.close(prompt_bufnr)
      for _, j in pairs(multi) do
        if j.path ~= nil then
          vim.cmd(string.format('%s +%d %s', 'tabedit', j.lnum, j.path))
        end
      end
    else
      local entry = action_state.get_selected_entry()
      if entry.path ~= nil then
        actions.close(prompt_bufnr)
        vim.cmd(string.format('%s +%d %s', 'tabedit', entry.lnum, entry.path))
      end
    end
  end

  function grep_word_under_cursor()
    local word = vim.fn.expand('<cword>')
    require('telescope.builtin').live_grep({ default_text = word })
  end

  function search_and_replace()
    require("telescope").extensions.live_grep_args.live_grep_args({
      attach_mappings = function(_, map)
        map("i", "<C-r>", function(prompt_bufnr)
          local action_state = require('telescope.actions.state')
          local current_picker = action_state.get_current_picker(prompt_bufnr)
          local prompt = current_picker:_get_prompt()
          local search_term = prompt:match("^%s*(.-)%s*$")
          local replace_term = vim.fn.input("Replace with: ")

          -- Create a backup of the affected files
          local backup_cmd = string.format("grep -rl '%s' . | xargs -I{} cp {} {}.bak", search_term, "{}")
          os.execute(backup_cmd)

          -- Perform the search and replace
          local replace_cmd = string.format("grep -rl '%s' . | xargs sed -i '' 's/%s/%s/g'", search_term, search_term, replace_term)
          os.execute(replace_cmd)

          require('telescope.actions').close(prompt_bufnr)
        end)
        return true
      end,
    })
  end

  function restore_backup()
    local restore_cmd = "find . -name '*.bak' | while read file; do mv \"$file\" \"${file%.bak}\"; done"
    os.execute(restore_cmd)
  end

  local telescope_setup = {
    defaults = {
      history = {
          path = '~/.local/share/nvim/databases/telescope_history.sqlite3',
          limit = 100,
      },
      mappings = {
        i = {
          ['<CR>'] = select_one_or_multi,
          ['<C-k>'] = actions.cycle_history_next,
          ['<C-j>'] = actions.cycle_history_prev
        },
        n = {
          ['<CR>'] = select_one_or_multi,
          ['<C-k>'] = move_selection_previous_5,
          ['<C-j>'] = move_selection_next_5,
        },
      },
      vimgrep_arguments = {
        'ag',
        '--nocolor',
        '--noheading',
        '--filename',
        '--numbers',
        '--column',
        '--smart-case',
        '--hidden',
        '--ignore', '.git', 
        '--ignore', 'node_modules',
      },
      prompt_prefix = '> ',
      selection_caret = '> ',
      entry_prefix = '  ',
      initial_mode = 'insert',
      selection_strategy = 'reset',
      sorting_strategy = 'descending',
      layout_strategy = 'horizontal',
      layout_config = {
        horizontal = {
          mirror = false,
        },
        vertical = {
          mirror = false,
        },
      },
      file_sorter = require'telescope.sorters'.get_fuzzy_file,
      file_ignore_patterns = {},
      generic_sorter = require'telescope.sorters'.get_generic_fuzzy_sorter,
      path_display = {},
      winblend = 0,
      border = {},
      borderchars = { '─', '│', '─', '│', '╭', '╮', '╯', '╰' },
      color_devicons = true,
      use_less = true,
      set_env = { ['COLORTERM'] = 'truecolor' }, -- default = nil,
      file_previewer = require'telescope.previewers'.vim_buffer_cat.new,
      grep_previewer = require'telescope.previewers'.vim_buffer_vimgrep.new,
      qflist_previewer = require'telescope.previewers'.vim_buffer_qflist.new,
      -- Developer configurations: Not meant for general override
      buffer_previewer_maker = require'telescope.previewers'.buffer_previewer_maker
    },
    pickers = {
      live_grep = {
        mappings = {
          i = { ["<c-f>"] = actions.to_fuzzy_refine },
        },
      },
    },
    extensions = {
      live_grep_args = {
        auto_quoting = true, -- enable/disable auto-quoting
      },
      fzf = {
        fuzzy = true,                    -- false will only do exact matching
        override_generic_sorter = true,  -- override the generic sorter
        override_file_sorter = true,     -- override the file sorter
        case_mode = "smart_case",        -- or "ignore_case" or "respect_case"
      }
    }
  }

  if vim.env.NVIM_CONFIG == 'coc' then
    telescope_setup.extensions.coc = {
      theme = 'ivy',
      prefer_locations = true, -- always use Telescope locations to preview definitions/declarations/implementations etc
      push_cursor_on_edit = true, -- save the cursor position to jump back in the future
      timeout = 3000, -- timeout for coc commands
    }
    require('telescope').load_extension('coc')
  end

  require('telescope').setup(telescope_setup)
  require('telescope').load_extension('live_grep_args')
  require('telescope').load_extension('fzf')
EOF
endfunction

autocmd VimEnter * call SetupTelescopeCoc()

nnoremap <leader>fs <cmd>Telescope lsp_document_symbols<cr>
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep initial_mode=insert default_selection_index=1<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
nnoremap <leader>gw :lua grep_word_under_cursor()<CR>
nnoremap <leader>fb :lua require('telescope.builtin').buffers{ default_text = vim.fn.expand('<cword>') }<CR>
nnoremap <leader>sr :lua search_and_replace()<CR>
nnoremap <leader>rb :lua restore_backup()<CR>
